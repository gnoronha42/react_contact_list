{"version":3,"file":"index.js","sources":["../../src/utils/convertArrayToPathName.ts","../../src/superstruct.ts","../../src/joi.ts","../../src/zod.ts","../../src/yup.ts"],"sourcesContent":["export default (paths: (string | number)[]): string =>\n  paths\n    .reduce(\n      (previous, path: string | number, index): string =>\n        `${previous}${\n          typeof path === 'string'\n            ? `${index > 0 ? '.' : ''}${path}`\n            : `[${path}]`\n        }`,\n      '',\n    )\n    .toString();\n","import {\n  appendErrors,\n  transformToNestObject,\n  Resolver,\n  FieldValues,\n} from 'react-hook-form';\nimport Superstruct from 'superstruct';\nimport convertArrayToPathName from './utils/convertArrayToPathName';\n\nconst parseErrorSchema = (\n  error: Superstruct.StructError,\n  validateAllFieldCriteria: boolean,\n) =>\n  Array.isArray(error.failures)\n    ? error.failures.reduce(\n        (previous: Record<string, any>, { path, message = '', type }) => {\n          const currentPath = convertArrayToPathName(path);\n\n          return {\n            ...previous,\n            ...(path\n              ? previous[currentPath] && validateAllFieldCriteria\n                ? {\n                    [currentPath]: appendErrors(\n                      currentPath,\n                      validateAllFieldCriteria,\n                      previous,\n                      type || '',\n                      message,\n                    ),\n                  }\n                : {\n                    [currentPath]: previous[currentPath] || {\n                      message,\n                      type,\n                      ...(validateAllFieldCriteria\n                        ? {\n                            types: { [type || '']: message || true },\n                          }\n                        : {}),\n                    },\n                  }\n              : {}),\n          };\n        },\n        {},\n      )\n    : [];\n\nexport const superstructResolver = <TFieldValues extends FieldValues>(\n  schema: Superstruct.Struct,\n): Resolver<TFieldValues> => async (\n  values,\n  _,\n  validateAllFieldCriteria = false,\n) => {\n  try {\n    return {\n      values: schema(values),\n      errors: {},\n    };\n  } catch (e) {\n    return {\n      values: {},\n      errors: transformToNestObject(\n        parseErrorSchema(e, validateAllFieldCriteria),\n      ),\n    };\n  }\n};\n","import {\n  appendErrors,\n  transformToNestObject,\n  Resolver,\n  FieldValues,\n} from 'react-hook-form';\nimport Joi from '@hapi/joi';\nimport convertArrayToPathName from './utils/convertArrayToPathName';\n\nconst parseErrorSchema = (\n  error: Joi.ValidationError,\n  validateAllFieldCriteria: boolean,\n) =>\n  Array.isArray(error.details)\n    ? error.details.reduce(\n        (previous: Record<string, any>, { path, message = '', type }) => {\n          const currentPath = convertArrayToPathName(path);\n\n          return {\n            ...previous,\n            ...(path\n              ? previous[currentPath] && validateAllFieldCriteria\n                ? {\n                    [currentPath]: appendErrors(\n                      currentPath,\n                      validateAllFieldCriteria,\n                      previous,\n                      type,\n                      message,\n                    ),\n                  }\n                : {\n                    [currentPath]: previous[currentPath] || {\n                      message,\n                      type,\n                      ...(validateAllFieldCriteria\n                        ? {\n                            types: { [type]: message || true },\n                          }\n                        : {}),\n                    },\n                  }\n              : {}),\n          };\n        },\n        {},\n      )\n    : [];\n\nexport const joiResolver = <TFieldValues extends FieldValues>(\n  schema: Joi.Schema,\n  options: Joi.AsyncValidationOptions = {\n    abortEarly: false,\n  },\n): Resolver<TFieldValues> => async (\n  values,\n  _,\n  validateAllFieldCriteria = false,\n) => {\n  try {\n    return {\n      values: await schema.validateAsync(values, {\n        ...options,\n      }),\n      errors: {},\n    };\n  } catch (e) {\n    return {\n      values: {},\n      errors: transformToNestObject(\n        parseErrorSchema(e, validateAllFieldCriteria),\n      ),\n    };\n  }\n};\n","import {\n  appendErrors,\n  Resolver,\n  ResolverError,\n  ResolverSuccess,\n  transformToNestObject,\n} from 'react-hook-form';\nimport * as z from 'zod';\nimport { ParseParams } from 'zod/lib/src/parser';\nimport convertArrayToPathName from './utils/convertArrayToPathName';\n\nconst parseErrorSchema = (\n  zodError: z.ZodError,\n  validateAllFieldCriteria: boolean,\n) => {\n  if (zodError.isEmpty) {\n    return {};\n  }\n\n  return zodError.errors.reduce<Record<string, any>>(\n    (previous, { path, message, code: type }) => {\n      const currentPath = convertArrayToPathName(path);\n\n      return {\n        ...previous,\n        ...(path\n          ? previous[currentPath] && validateAllFieldCriteria\n            ? {\n                [currentPath]: appendErrors(\n                  currentPath,\n                  validateAllFieldCriteria,\n                  previous,\n                  type,\n                  message,\n                ),\n              }\n            : {\n                [currentPath]: previous[currentPath] || {\n                  message,\n                  type,\n                  ...(validateAllFieldCriteria\n                    ? {\n                        types: { [type]: message || true },\n                      }\n                    : {}),\n                },\n              }\n          : {}),\n      };\n    },\n    {},\n  );\n};\n\nexport const zodResolver = <T extends z.ZodSchema<any, any>>(\n  schema: T,\n  options?: ParseParams,\n): Resolver<z.infer<T>> => async (\n  values,\n  _,\n  validateAllFieldCriteria = false,\n) => {\n  const result = schema.safeParse(values, options);\n\n  if (result.success) {\n    return { values: result.data, errors: {} } as ResolverSuccess<z.infer<T>>;\n  }\n\n  return {\n    values: {},\n    errors: transformToNestObject(\n      parseErrorSchema(result.error, validateAllFieldCriteria),\n    ),\n  } as ResolverError<z.infer<T>>;\n};\n","import { Resolver, transformToNestObject, FieldValues } from 'react-hook-form';\nimport Yup from 'yup';\n\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) =>\n  Array.isArray(error.inner) && error.inner.length\n    ? error.inner.reduce(\n        (previous: Record<string, any>, { path, message, type }) => {\n          const previousTypes = (previous[path] && previous[path].types) || {};\n          const key = path || type;\n\n          return {\n            ...previous,\n            ...(key\n              ? {\n                  [key]: {\n                    ...(previous[key] || {\n                      message,\n                      type,\n                    }),\n                    ...(validateAllFieldCriteria\n                      ? {\n                          types: {\n                            ...previousTypes,\n                            [type]: previousTypes[type]\n                              ? [...[].concat(previousTypes[type]), message]\n                              : message,\n                          },\n                        }\n                      : {}),\n                  },\n                }\n              : {}),\n          };\n        },\n        {},\n      )\n    : {\n        [error.path]: { message: error.message, type: error.type },\n      };\n\nexport const yupResolver = <TFieldValues extends FieldValues>(\n  schema: Yup.ObjectSchema | Yup.Lazy,\n  options: Omit<Yup.ValidateOptions, 'context'> = {\n    abortEarly: false,\n  },\n): Resolver<TFieldValues> => async (\n  values,\n  context,\n  validateAllFieldCriteria = false,\n) => {\n  try {\n    if (\n      (options as Yup.ValidateOptions).context &&\n      process.env.NODE_ENV === 'development'\n    ) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n      );\n    }\n    return {\n      values: (await schema.validate(values, {\n        ...options,\n        context,\n      })) as any,\n      errors: {},\n    };\n  } catch (e) {\n    const parsedErrors = parseErrorSchema(e, validateAllFieldCriteria);\n    return {\n      values: {},\n      errors: transformToNestObject(parsedErrors),\n    };\n  }\n};\n"],"names":["paths","reduce","previous","path","index","toString","parseErrorSchema","error","validateAllFieldCriteria","Array","isArray","failures","message","type","currentPath","convertArrayToPathName","[object Object]","appendErrors","types","details","zodError","isEmpty","errors","code","schema","options","abortEarly","async","values","_","validateAsync","e","transformToNestObject","context","process","env","NODE_ENV","validate","parsedErrors","inner","length","previousTypes","key","concat","result","safeParse","success","data"],"mappings":"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"}